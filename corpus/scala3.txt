===================================
Macro expressions
===================================

def string(arg: Int) = 
  ${ '{ ${ yesh('arg) } } }

---

(compilation_unit
  (function_definition
    (identifier)
    (parameters
      (parameter
        (identifier)
        (type_identifier)))
    (macro_splice_expression
      (macro_quote_expression
        (macro_splice_expression
          (call_expression
            (identifier)
            (arguments
              (symbol_literal))))))))


==================================
Opaque type aliases (Scala 3)
==================================

opaque type A = Int
private opaque type B = String

---

(compilation_unit
  (type_definition 
    (opaque_modifier) (type_identifier) (type_identifier))

  (type_definition 
    (modifiers (access_modifier))
    (opaque_modifier) 
    (type_identifier) 
    (type_identifier))
)


===================================
Enums
===================================

enum Hello[Y] extends java.Enumeration derives Codec, Eq {
  case World, You
  case Test[A](bla: Int, yo: String) extends Hello[A]
}

---

(compilation_unit
  (enum_definition
    (identifier)
    (type_parameters (identifier))
    (extends_clause (stable_type_identifier (identifier) (type_identifier)))
    (derives_clause (type_identifier) (type_identifier))
    (enum_body
      (enum_case_definitions
        (simple_enum_case (identifier))
        (simple_enum_case (identifier)))
      (enum_case_definitions
        (full_enum_case
          (identifier)
          (type_parameters (identifier))

          (class_parameters
            (class_parameter
              (identifier)
              (type_identifier))
            (class_parameter
              (identifier)
              (type_identifier)))
          (extends_clause
            (generic_type (type_identifier) (type_arguments (type_identifier))))))
      )
    )
  )



